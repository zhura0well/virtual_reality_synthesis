

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex, normal;
attribute vec2 texture;
uniform mat4 ModelViewProjectionMatrix;

varying vec3 normalV;
varying vec2 textureV;
uniform vec3 lightPosition;
varying vec3 toLightV;
varying vec3 toViewV;
uniform vec2 translationVar;
uniform float scale;

mat4 translation(vec2 t) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][1] = 0.0;
    dst[0][2] = 0.0;
    dst[0][3] = 0.0;
    dst[1][0] = 0.0;
    dst[1][1] = 1.0;
    dst[1][2] = 0.0;
    dst[1][3] = 0.0;
    dst[2][0] = 0.0;
    dst[2][1] = 0.0;
    dst[2][2] = 1.0;
    dst[2][3] = 0.0;
    dst[3][0] = t.x;
    dst[3][1] = t.y;
    dst[3][2] = 0.0;
    dst[3][3] = 1.0;

    return dst;
}

mat4 scaling(float s){
    mat4 dst;

    dst[0][0] = s;
    dst[0][1] = 0.0;
    dst[0][2] = 0.0;
    dst[0][3] = 0.0;
    dst[1][0] = 0.0;
    dst[1][1] = s;
    dst[1][2] = 0.0;
    dst[1][3] = 0.0;
    dst[2][0] = 0.0;
    dst[2][1] = 0.0;
    dst[2][2] = s;
    dst[2][3] = 0.0;
    dst[3][0] = 0.0;
    dst[3][1] = 0.0;
    dst[3][2] = 0.0;
    dst[3][3] = 1.0;

    return dst;
}

void main() {
    vec4 tr1 = translation(-translationVar)*vec4(texture,0.0,1.0);
    vec4 tr2 = scaling(scale)*tr1;
    vec4 tr3 = translation(translationVar)*tr2;
    normalV = normal;
    textureV = tr3.xy;
    toLightV = lightPosition-vertex;
    toViewV = -vertex;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec3 lightPosition;
uniform vec3 lightDirection;
uniform float range;
uniform float focus;

varying vec3 normalV;
varying vec3 toLightV;
varying vec3 toViewV;
uniform sampler2D tmu;
varying vec2 textureV;

uniform vec4 color;
void main() {
    vec3 toLight = normalize(toLightV);
    vec3 toView = normalize(toViewV);
    vec3 N = normalize(normalV);
    vec3 halfVector = normalize(toLight + toView);
    float dotFromDirection = dot(toLight,-lightDirection);
    float inLight = smoothstep(range-focus,range, dotFromDirection);
    float light = inLight * dot(N, toLight);
    float specular = inLight * pow(dot(N, halfVector), 100.0);
    gl_FragColor = vec4(color.rgb*light+specular,1.0);
    vec4 texColor = texture2D(tmu,textureV);
    gl_FragColor = texColor*light;
    if (focus > 99.0) {
        gl_FragColor = vec4(0.0,1.,0.,1.0);
    }
}`;